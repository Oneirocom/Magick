import {
  alephAlphaModelsArray,
  anthropicModelsArray,
  anyscaleModelsArray,
  baseTenModelsArray,
  bedrockModelsArray,
  deepInfraChatModelsArray,
  openRouterModelsArray,
  perplexityAIModelsArray,
  petalsModelsArray,
  sageMakerModelsArray,
  togetherAIModelsArray,
  vllmModelsArray,
  voyageAIModelsArray,
  xinferenceModelsArray,
  cloudflareWorkersAIModelsArray,
  ai21ModelsArray,
  nlpCloudModelsArray,
  vertexAIGoogleModelsArray,
  huggingFaceModelsWithPromptFormattingArray,
  mistralAIModelsArray,
  replicateModelsArray,
  palmModelsArray,
  allOllamaModelsArray,
  googleAIStudioModelsArray,
  googleAIStudioModelsWithPrefix,
  allOpenAICompletionModelsArray,
  allOpenAICompletionModelsWithPrefix,
  anthropicModelsWithPrefix,
  sageMakerModelsWithPrefix,
  bedrockModelsWithPrefix,
  anyscaleModelsWithPrefix,
  perplexityAIModelsWithPrefix,
  vllmModelsWithPrefix,
  deepInfraChatModelsWithPrefix,
  togetherAIModelsWithPrefix,
  alephAlphaModelsWithPrefix,
  baseTenModelsWithPrefix,
  openRouterModelsWithPrefix,
  petalsModelsWithPrefix,
  allOllamaModelsWithPrefix,
  palmModelsWithPrefix,
  xinferenceModelsWithPrefix,
  cloudflareWorkersAIModelsWithPrefix,
  ai21ModelsWithPrefix,
  nlpCloudModelsWithPrefix,
  voyageAIModelsWithPrefix,
  replicateModelsWithPrefix,
  mistralAIModelsWithPrefix,
  vertexAIGoogleModelsWithPrefix,
  huggingFaceModelsWithPromptFormattingWithPrefix,
} from '../constants/completionModelArrays'
import {
  bedrockEmbeddingModelsArray,
  cohereEmbeddingModelsArray,
  mistralEmbeddingModelsArray,
  voyageEmbeddingModelsArray,
  openAIEmbeddingModelsArray,
  huggingFaceEmbeddingModelsArray,
  openAIEmbeddingModelsWithPrefix,
  bedrockEmbeddingModelsWithPrefix,
  cohereEmbeddingModelsWithPrefix,
  huggingFaceEmbeddingModelsWithPrefix,
  voyageEmbeddingModelsWithPrefix,
  mistralEmbeddingModelsWithPrefix,
} from '../constants/embeddingModelArrays'

import {
  LLMProviderDisplayNames,
  LLMProviderKeys,
  LLMProviders,
  LLMProviderPrefixes,
  ProviderRecord,
} from './providerTypes'

export const providers: Record<LLMProviders, ProviderRecord> = {
  [LLMProviders.OpenAI]: {
    provider: LLMProviders.OpenAI,
    displayName: LLMProviderDisplayNames.OpenAI,
    keyName: LLMProviderKeys.OpenAI,
    completionModels: allOpenAICompletionModelsArray, // Add the specific models here
    embeddingModels: openAIEmbeddingModelsArray,
    allModels: [
      ...allOpenAICompletionModelsWithPrefix,
      ...openAIEmbeddingModelsWithPrefix,
    ],
    vendorModelPrefix: '',
  },
  [LLMProviders.Azure]: {
    provider: LLMProviders.Azure,
    displayName: LLMProviderDisplayNames.Azure,
    keyName: LLMProviderKeys.Azure,
    completionModels: [],
    embeddingModels: [],
    allModels: [],
    vendorModelPrefix: LLMProviderPrefixes.Azure,
  },
  [LLMProviders.Anthropic]: {
    provider: LLMProviders.Anthropic,
    displayName: LLMProviderDisplayNames.Anthropic,
    keyName: LLMProviderKeys.Anthropic,
    completionModels: anthropicModelsArray,
    embeddingModels: [],
    allModels: anthropicModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.Sagemaker]: {
    provider: LLMProviders.Sagemaker,
    displayName: LLMProviderDisplayNames.Sagemaker,
    keyName: LLMProviderKeys.Sagemaker,
    completionModels: sageMakerModelsArray,
    embeddingModels: [],
    allModels: sageMakerModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Sagemaker,
  },
  [LLMProviders.Bedrock]: {
    provider: LLMProviders.Bedrock,
    displayName: LLMProviderDisplayNames.Bedrock,
    keyName: LLMProviderKeys.Bedrock,
    completionModels: bedrockModelsArray,
    embeddingModels: bedrockEmbeddingModelsArray,
    allModels: [
      ...bedrockModelsWithPrefix,
      ...bedrockEmbeddingModelsWithPrefix,
    ],
    vendorModelPrefix: LLMProviderPrefixes.Bedrock,
  },
  [LLMProviders.Anyscale]: {
    provider: LLMProviders.Anyscale,
    displayName: LLMProviderDisplayNames.Anyscale,
    keyName: LLMProviderKeys.Anyscale,
    completionModels: anyscaleModelsArray,
    embeddingModels: [],
    allModels: anyscaleModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Anyscale,
  },
  [LLMProviders.PerplexityAI]: {
    provider: LLMProviders.PerplexityAI,
    displayName: LLMProviderDisplayNames.PerplexityAI,
    keyName: LLMProviderKeys.PerplexityAI,
    completionModels: perplexityAIModelsArray,
    embeddingModels: [],
    allModels: perplexityAIModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.PerplexityAI,
  },
  [LLMProviders.VLLM]: {
    provider: LLMProviders.VLLM,
    displayName: LLMProviderDisplayNames.VLLM,
    keyName: LLMProviderKeys.VLLM,
    completionModels: vllmModelsArray,
    embeddingModels: [],
    allModels: vllmModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.VLLM,
  },
  [LLMProviders.DeepInfra]: {
    provider: LLMProviders.DeepInfra,
    displayName: LLMProviderDisplayNames.DeepInfra,
    keyName: LLMProviderKeys.DeepInfra,
    completionModels: deepInfraChatModelsArray,
    embeddingModels: [],
    allModels: deepInfraChatModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.DeepInfra,
  },
  [LLMProviders.Cohere]: {
    provider: LLMProviders.Cohere,
    displayName: LLMProviderDisplayNames.Cohere,
    keyName: LLMProviderKeys.Cohere,
    completionModels: [],
    embeddingModels: cohereEmbeddingModelsArray,
    allModels: cohereEmbeddingModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.TogetherAI]: {
    provider: LLMProviders.TogetherAI,
    displayName: LLMProviderDisplayNames.TogetherAI,
    keyName: LLMProviderKeys.TogetherAI,
    completionModels: togetherAIModelsArray,
    embeddingModels: [],
    allModels: togetherAIModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.TogetherAI,
  },
  [LLMProviders.AlephAlpha]: {
    provider: LLMProviders.AlephAlpha,
    displayName: LLMProviderDisplayNames.AlephAlpha,
    keyName: LLMProviderKeys.AlephAlpha,
    completionModels: alephAlphaModelsArray,
    embeddingModels: [],
    allModels: alephAlphaModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.Baseten]: {
    provider: LLMProviders.Baseten,
    displayName: LLMProviderDisplayNames.Baseten,
    keyName: LLMProviderKeys.Baseten,
    completionModels: baseTenModelsArray,
    embeddingModels: [],
    allModels: baseTenModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Baseten,
  },
  [LLMProviders.OpenRouter]: {
    provider: LLMProviders.OpenRouter,
    displayName: LLMProviderDisplayNames.OpenRouter,
    keyName: LLMProviderKeys.OpenRouter,
    completionModels: openRouterModelsArray,
    embeddingModels: [],
    allModels: openRouterModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.OpenRouter,
  },
  [LLMProviders.CustomAPI]: {
    provider: LLMProviders.CustomAPI,
    displayName: LLMProviderDisplayNames.CustomAPI,
    keyName: LLMProviderKeys.Unknown,
    completionModels: [],
    embeddingModels: [],
    allModels: [],
    vendorModelPrefix: '',
  },
  [LLMProviders.Petals]: {
    provider: LLMProviders.Petals,
    displayName: LLMProviderDisplayNames.Petals,
    keyName: LLMProviderKeys.Petals,
    completionModels: petalsModelsArray,
    embeddingModels: [],
    allModels: petalsModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Petals,
  },
  [LLMProviders.Ollama]: {
    provider: LLMProviders.Ollama,
    displayName: LLMProviderDisplayNames.Ollama,
    keyName: LLMProviderKeys.Ollama,
    completionModels: allOllamaModelsArray,
    embeddingModels: [],
    allModels: allOllamaModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.GoogleAIStudio]: {
    provider: LLMProviders.GoogleAIStudio,
    displayName: LLMProviderDisplayNames.GoogleAIStudio,
    keyName: LLMProviderKeys.GoogleAIStudio,
    completionModels: googleAIStudioModelsArray,
    embeddingModels: [],
    allModels: googleAIStudioModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.GoogleAIStudio,
  },
  [LLMProviders.Palm]: {
    provider: LLMProviders.Palm,
    displayName: LLMProviderDisplayNames.Palm,
    keyName: LLMProviderKeys.Palm,
    completionModels: palmModelsArray,
    embeddingModels: [],
    allModels: palmModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Palm,
  },
  [LLMProviders.HuggingFace]: {
    provider: LLMProviders.HuggingFace,
    displayName: LLMProviderDisplayNames.HuggingFace,
    keyName: LLMProviderKeys.HuggingFace,
    completionModels: huggingFaceModelsWithPromptFormattingArray,
    embeddingModels: huggingFaceEmbeddingModelsArray,
    allModels: [
      ...huggingFaceModelsWithPromptFormattingWithPrefix,
      ...huggingFaceEmbeddingModelsWithPrefix,
    ],
    vendorModelPrefix: LLMProviderPrefixes.HuggingFace,
  },
  [LLMProviders.Xinference]: {
    provider: LLMProviders.Xinference,
    displayName: LLMProviderDisplayNames.Xinference,
    keyName: LLMProviderKeys.Xinference,
    completionModels: xinferenceModelsArray,
    embeddingModels: [],
    allModels: xinferenceModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Xinference,
  },
  [LLMProviders.CloudflareWorkersAI]: {
    provider: LLMProviders.CloudflareWorkersAI,
    displayName: LLMProviderDisplayNames.CloudflareWorkersAI,
    keyName: LLMProviderKeys.CloudflareWorkersAI,
    completionModels: cloudflareWorkersAIModelsArray,
    embeddingModels: [],
    allModels: cloudflareWorkersAIModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.CloudflareWorkersAI,
  },
  [LLMProviders.AI21]: {
    provider: LLMProviders.AI21,
    displayName: LLMProviderDisplayNames.AI21,
    keyName: LLMProviderKeys.AI21,
    completionModels: ai21ModelsArray,
    embeddingModels: [],
    allModels: ai21ModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.NLPCloud]: {
    provider: LLMProviders.NLPCloud,
    displayName: LLMProviderDisplayNames.NLPCloud,
    keyName: LLMProviderKeys.NLPCloud,
    completionModels: nlpCloudModelsArray,
    embeddingModels: [],
    allModels: nlpCloudModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.VoyageAI]: {
    provider: LLMProviders.VoyageAI,
    displayName: LLMProviderDisplayNames.VoyageAI,
    keyName: LLMProviderKeys.VoyageAI,
    completionModels: voyageAIModelsArray,
    embeddingModels: voyageEmbeddingModelsArray,
    allModels: [
      ...voyageAIModelsWithPrefix,
      ...voyageEmbeddingModelsWithPrefix,
    ],
    vendorModelPrefix: LLMProviderPrefixes.VoyageAI,
  },
  [LLMProviders.Replicate]: {
    provider: LLMProviders.Replicate,
    displayName: LLMProviderDisplayNames.Replicate,
    keyName: LLMProviderKeys.Replicate,
    completionModels: replicateModelsArray,
    embeddingModels: [],
    allModels: replicateModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.Replicate,
  },
  [LLMProviders.Meta]: {
    provider: LLMProviders.Meta,
    displayName: LLMProviderDisplayNames.Meta,
    keyName: LLMProviderKeys.Meta,
    completionModels: [],
    embeddingModels: [],
    allModels: [],
    vendorModelPrefix: '',
  },
  [LLMProviders.Mistral]: {
    provider: LLMProviders.Mistral,
    displayName: LLMProviderDisplayNames.Mistral,
    keyName: LLMProviderKeys.Mistral,
    completionModels: mistralAIModelsArray,
    embeddingModels: mistralEmbeddingModelsArray,
    allModels: [
      ...mistralAIModelsWithPrefix,
      ...mistralEmbeddingModelsWithPrefix,
    ],
    vendorModelPrefix: LLMProviderPrefixes.Mistral,
  },
  [LLMProviders.VertexAI]: {
    provider: LLMProviders.VertexAI,
    displayName: LLMProviderDisplayNames.VertexAI,
    keyName: LLMProviderKeys.VertexAI,
    completionModels: vertexAIGoogleModelsArray,
    embeddingModels: [],
    allModels: vertexAIGoogleModelsWithPrefix,
    vendorModelPrefix: '',
  },
  [LLMProviders.CustomOpenAI]: {
    provider: LLMProviders.CustomOpenAI,
    displayName: LLMProviderDisplayNames.CustomOpenAI,
    keyName: LLMProviderKeys.OpenAI,
    completionModels: allOpenAICompletionModelsWithPrefix,
    embeddingModels: [],
    allModels: allOpenAICompletionModelsWithPrefix,
    vendorModelPrefix: LLMProviderPrefixes.CustomOpenAI,
  },
}

export type ActiveProviders =
  | LLMProviders.OpenAI
  | LLMProviders.CustomOpenAI
  | LLMProviders.GoogleAIStudio
  | LLMProviders.TogetherAI
  | LLMProviders.Palm
// | LLMProviders.VertexAI

const activeProviders: ActiveProviders[] = [
  LLMProviders.OpenAI,
  LLMProviders.CustomOpenAI,
  LLMProviders.TogetherAI,
  LLMProviders.GoogleAIStudio,
  LLMProviders.Palm,
  // LLMProviders.VertexAI,
]

export const availableProviders = activeProviders.map(provider => {
  return providers[provider]
})
